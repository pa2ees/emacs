(setq default-directory (expand-file-name "~/.emacs.d/settings/"))
(copy-file (expand-file-name "~/.emacs") (expand-file-name "~/.emacs.d/settings/.emacs.bak") t)



(put 'narrow-to-region 'disabled nil)
(defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t)
    (message "Buffer Reverted!"))
(global-set-key [f5] 'revert-buffer-no-confirm)

(setq c-default-style
      '((java-mode . "java")
        (awk-mode . "awk")
        (other . "linux")))

(setq c-offset-alist
          '((access-label . -1)
            (substatement-open . 0)))
(setq-default tab-width 4)
(setq c-basic-offset tab-width)

(setq comment-start "// ")
(setq comment-end "")


(setq scroll-margin 4)
(setq scroll-conservatively 1)
(setq-default truncate-lines t)
(put 'narrow-to-region 'disabled nil)
(setq-default verilog-auto-newline nil)
(setq-default indent-tabs-mode nil)
(setq column-number-mode t)

(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-version 6)
(setq kept-old-versions 2)
(setq version-control t)

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize))

(load-theme 'ample t t)
(load-theme 'afternoon t t)
(load-theme 'abyss t t)
;;(enable-theme 'ample)
;;(enable-theme 'afternoon)
(enable-theme 'abyss)


(require 'multiple-cursors)

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C-x C-r") 'set-rectangular-region-anchor)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(add-to-list 'exec-path "C:/_projects/GNU-GLOBAL/bin")

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1))))

(require 'sr-speedbar)
;;(global-set-key (kbd "s-s") 'sr-speedbar-toggle)
;;(global-set-key (kbd "s-o") 'sr-speedbar-select-window)
;;(global-set-key (kbd "c-c c-s t") 'sr-speedbar-toggle)
;;(global-set-key (kbd "c-c c-s o") 'sr-speedbar-select-window)


(setq w32-pass-lwindow-to-system nil)
(setq w32-lwindow-modifier 'super)


(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

;; ;; company-capf for substring completions
;; ;; company-dabbrev-code for local and global variable completion
;; ;; company-gtags for function completion with parameters

;; This gives precidence to anything semantic finds (ie after . or ->).
;; if nothing is found, then it uses gtags
(setq company-backends '(company-semantic (company-dabbrev-code company-gtags company-capf)))


;; (require 'cc-mode)
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)

(semantic-mode 1)



;;allows partial or even substring completions.  IE 'arf' matches function 'barf' 
(setq completion-styles '(substring))



(add-hook 'c-mode-hook
          (lambda () (progn
                       (setq comment-start "// ")
                       (setq comment-end "")
                       (local-set-key (kbd "C-;") 'company-complete-common)
                       (hs-minor-mode 1)
                       (hs-org/minor-mode 1)
                       (local-set-key (kbd "C-c o") 'ff-find-other-file)
                       ;;(local-set-key (kbd ".") 'semantic-complete-self-insert)
                       ;;(require 'origami)
                       ;;(local-set-key [C-tab] 'company-other-backend)
                       (local-set-key [S-tab] 'indent-relative))))

(require 'hideshow-org)

(add-hook 'python-mode-hook
          (lambda () (progn
                       (hs-minor-mode 1)
                       (hs-org/minor-mode 1))))

(global-linum-mode 1)

(setq python-shell-prompt-detect-failure-warning nil)

;; ORG MODE
(require 'org)
(require 'org-bullets)

(setq org-log-done 'time) ;; Create timestamp when todo item is done
(define-key global-map "\C-ca" 'org-agenda)
(org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (python . t)))
(setq org-todo-keywords
      '((sequence "TODO" "DOING(d)" "BLOCKED(b)" "DONE")))

(defun calendar-exit-kill-window ()
  "Exits calendar and kills the window it was in"
  (interactive)
  (let ((cur-win (selected-window)))
    (calendar-exit)
    (delete-window cur-win)))


(add-hook 'org-mode-hook
          (lambda () (progn
                       (org-bullets-mode 1))))

(add-hook 'calendar-mode-hook
          (lambda () (progn
                       (local-set-key (kbd "q") 'calendar-exit-kill-window))))


;; GIT MODE

;; this allows magit to prompt for passphrase
(setenv "SSH_ASKPASS" "git-gui--askpass")
(global-set-key (kbd "C-x g") 'magit-status)

;; HELM
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)


;; PROJECTILE
(setq projectile-keymap-prefix (kbd "C-x p"))
(setq projectile-completion-system 'helm)
;;(setp projectile-switch-project-action 'helm-projectile)
(setq projectile-indexing-method 'alien) ;; let's test other features first
(require 'projectile)
(projectile-mode 1)
;;(helm-projectile-on)


;; SMART MODELINE
(setq sml/theme 'powerline)
(sml/setup)
(sml-modeline-mode 1)


;; COOL STUFF ;;
;; C-u M-x align  ;; aligns groups of words

;; highlight parentheses you are in
(global-highlight-parentheses-mode 1)

;; automatically insert spaces before and after operators (+, -, etc)
(electric-spacing-mode 1)

;; automacially deal with closing parentheses, etc
(electric-pair-mode 1)

;; disable tool bar
(tool-bar-mode -1)

;; disable menu bar
(menu-bar-mode -1)

;; disable scroll bars
(toggle-scroll-bar -1)


(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

